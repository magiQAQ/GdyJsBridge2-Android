/*
 * @Date: 2022-10-28 15:01:03
 * @LastEditors: shijiawei
 * @LastEditTime: 2022-10-28 15:01:15
 */
;(function () {
  'use strict'
  var a = {
    init: !1,
    isIOS: function () {
      return !!navigator.userAgent.match(/\(i[^;]+;( U;)? CPU.+Mac OS X/i)
    },
    isAndroid: function () {
      const t = navigator.userAgent
      return t.indexOf('Android') > -1 || t.indexOf('Linux') > -1
    },
    functions: {},
    callId: 0,
    callBackMap: new Map(),
    callNative: function (t, e, i) {
      let n = ++this.callId
      if (typeof t != 'string') {
        console.error("param 'methodName' is not a string")
        return
      }
      if (e != null && !(e instanceof Array)) {
        console.error("param 'args' is not a null or Array")
        return
      }
      if (i != null && typeof i != 'function') {
        console.error("param 'callback' is not a function")
        return
      }
      i && (this.callBackMap[n] = i)
      let s = { id: n, methodName: t, args: e }
      this.isAndroid() && _gdyNative.callNative(JSON.stringify(s)),
        this.isIOS() &&
          window.webkit.messageHandlers.callNative.postMessage(
            JSON.stringify(s)
          )
    },
    register: function (t, e) {
      if (typeof e != 'function') {
        console.error("param 'fun' is not a function!!!")
        return
      }
      let i = this
      ;(this.functions[t] = e),
        this.init ||
          ((this.init = !0),
          setTimeout(function () {
            i.isAndroid() && _gdyNative.jsFunctionReady(),
              i.isIOS() &&
                window.webkit.messageHandlers.jsFunctionReady.postMessage('')
          }, 0))
    },
    unRegister: function (t) {
      this.functions[t]
        ? delete this.functions[t]
        : console.log(`function ${t} is not exists`)
    },
    handleMessageFromNative: function (t) {
      const e = JSON.parse(t)
      let i = { callBackId: e.id, success: !1 },
        n = this.functions[e.methodName]
      if (n)
        try {
          ;(i.data = n.apply(null, e.arg)), (i.success = !0)
        } catch (s) {
          ;(i.data = 'js function invoke catch error'), console.error(s)
        }
      else i.data = `js function ${e.methodName} not exists`
      this.isAndroid() && _gdyNative.returnValue(JSON.stringify(i)),
        this.isIOS() &&
          window.webkit.messageHandlers.returnValue.postMessage(
            JSON.stringify(i)
          )
    },
    postResult: function (t) {
      const e = JSON.parse(t)
      let i = this.callBackMap[e.callBackId]
      i && (this.callBackMap.delete(e.callBackId), i(e.success, e.data))
    },
  }
  ;(function () {
    navigator.userAgent.indexOf('GdyBridgeWebView') != -1 &&
      (window._gdyBridge || (window._gdyBridge = a))
  })()
})()
